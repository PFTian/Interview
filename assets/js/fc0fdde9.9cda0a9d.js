"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[57],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4446:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],l={},s="Javascript Interview Questions",p={unversionedId:"languages/javascript",id:"languages/javascript",title:"Javascript Interview Questions",description:"1. What is javascript",source:"@site/docs/languages/javascript.md",sourceDirName:"languages",slug:"/languages/javascript",permalink:"/Interview/docs/languages/javascript",editUrl:"https://github.com/PFTian/Interview/docs/languages/javascript.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Java",permalink:"/Interview/docs/languages/java"}},c={},u=[],m={toc:u};function d(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"javascript-interview-questions"},"Javascript Interview Questions"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is javascript"),(0,i.kt)("p",{parentName:"li"},"JavaScript is a client-side and server-side scripting language inserted into HTML pages and is understood by web browsers. JavaScript is also an Object-based Programming language.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enumerate the differences between Java and JavaScript?"),(0,i.kt)("p",{parentName:"li"},"Java is a complete programming language. In contrast, JavaScript is a coded program that can be introduced to HTML pages. These two languages are not at all inter-dependent and are designed for different intent. Java is an object-oriented programming (OOPS) or structured programming languages like C++ or C, whereas JavaScript is a client-side scripting language.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What are JavaScript Data Types?"),(0,i.kt)("p",{parentName:"li"},"Following are the JavaScript Data types:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Number"),(0,i.kt)("li",{parentName:"ul"},"String"),(0,i.kt)("li",{parentName:"ul"},"Boolean"),(0,i.kt)("li",{parentName:"ul"},"Object"),(0,i.kt)("li",{parentName:"ul"},"Undefined"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the use of isNaN function?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"isNan")," function returns true if the argument is not a number; otherwise, it is false.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the difference between == and === operators?"),(0,i.kt)("p",{parentName:"li"},"JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators takes type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this,"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"NaN is not equal to anything, including NaN."),(0,i.kt)("li",{parentName:"ol"},"Positive and negative zeros are equal to one another."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Two Boolean operands are strictly equal if both are true or both are false.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Two objects are strictly equal if they refer to the same Object.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined --\x3e false but null==undefined --\x3e true"))),(0,i.kt)("p",{parentName:"li"},"Some of the example which covers the above cases"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"0 == false   // true\n0 === false  // false\n1 == \"1\"     // true\n1 === \"1\"    // false\nnull == undefined // true\nnull === undefined // false\n'0' == false // true\n'0' === false // false\n[]==[] or []===[] //false, refer different objects in memory\n{}=={} or {}==={} //false, refer different objects in memory\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In JavaScript, it is possible for the programmers to convert the string to an integer?"),(0,i.kt)("p",{parentName:"li"},"Yes, this can be done easily in JavaScript. For this, the function parseInt() is used. It generally takes the string into the first parameter and then to the next parameter which is considered as the base of given string.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Name the two basic groups of data types in JavaScript?"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reference types",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Objects"),(0,i.kt)("li",{parentName:"ul"},"Arrays"),(0,i.kt)("li",{parentName:"ul"},"Functions"))),(0,i.kt)("li",{parentName:"ul"},"Primitive",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Numbers"),(0,i.kt)("li",{parentName:"ul"},"Boolean"),(0,i.kt)("li",{parentName:"ul"},"Null"),(0,i.kt)("li",{parentName:"ul"},"Undefined"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In a program, how can you delete the variables? Is there any limit on deletion?"),(0,i.kt)("p",{parentName:"li"},"This task can be done simply with the help of an operator and i.e. Delete. Although it deletes all the variables, as well as the objects in a program it\u2019s is not possible for this operator to delete those objects and variables that are declared already with the VAR keyword. For deleting these variables, another command is to be followed. Any number of other variables can be deleted with this operator. It is also possible to erase a specific portion of coding simply and without accessing any other command for this.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is a prototype chain"),(0,i.kt)("p",{parentName:"li"},"Prototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language."),(0,i.kt)("p",{parentName:"li"},"The prototype on object instance is available through Object.getPrototypeOf(object) or proto property whereas prototype on constructors function is available through Object.prototype.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is JSON and its common operations"),(0,i.kt)("p",{parentName:"li"},"JSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json"),(0,i.kt)("p",{parentName:"li"},"Parsing: Converting a string to a native object"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"JSON.parse(text);\n")),(0,i.kt)("p",{parentName:"li"},"Stringification: converting a native object to a string so it can be transmitted across the network"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"JSON.stringify(object);\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the purpose of the array slice method"),(0,i.kt)("p",{parentName:"li"},"The slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let arrayIntegers = [1, 2, 3, 4, 5];\nlet arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]\nlet arrayIntegers3 = arrayIntegers.slice(4); //returns [5]\n")),(0,i.kt)("p",{parentName:"li"},"Note: Slice method won't mutate the original array but it returns the subset as a new array.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the purpose of the array splice method."),(0,i.kt)("p",{parentName:"li"},"The splice() method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array."),(0,i.kt)("p",{parentName:"li"},"Some of the examples of this method are,"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\n\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, 'a', 'b', 'c'); //returns [4]; original array: [1, 2, 3, \"a\", \"b\", \"c\", 5]\n")),(0,i.kt)("p",{parentName:"li"},"Note: Splice method modifies the original array and returns the deleted array.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the difference between slice and splice"),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"slice"),(0,i.kt)("th",{parentName:"tr",align:null},"splice"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Doesn't modify the original array(immutable)"),(0,i.kt)("td",{parentName:"tr",align:null},"Modifies the original array(mutable)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Returns the subset of original array"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the deleted elements as array")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Used to pick the elements from array"),(0,i.kt)("td",{parentName:"tr",align:null},"Used to insert or delete elements to/from array"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"How do you compare Object and Map"),(0,i.kt)("p",{parentName:"li"},"Objects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive."),(0,i.kt)("li",{parentName:"ol"},"The keys in Map are ordered while keys added to object are not. Thus, when iterating over it, a Map object returns keys in order of insertion."),(0,i.kt)("li",{parentName:"ol"},"You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually."),(0,i.kt)("li",{parentName:"ol"},"A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them."),(0,i.kt)("li",{parentName:"ol"},"An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done."),(0,i.kt)("li",{parentName:"ol"},"A Map may perform better in scenarios involving frequent addition and removal of key pairs."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What are lambda or arrow functions?"),(0,i.kt)("p",{parentName:"li"},"An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations."),(0,i.kt)("p",{parentName:"li"},"There are differences between arrow functions and traditional functions, as well as some limitations:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Arrow functions don't have their own bindings to this or super, and should not be used as methods."),(0,i.kt)("li",{parentName:"ul"},"Arrow functions don't have access to the new.target keyword."),(0,i.kt)("li",{parentName:"ul"},"Arrow functions aren't suitable for call, apply and bind methods, which generally rely on establishing a scope."),(0,i.kt)("li",{parentName:"ul"},"Arrow functions cannot be used as constructors."),(0,i.kt)("li",{parentName:"ul"},"Arrow functions cannot use yield, within its body."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is a first class function?"),(0,i.kt)("p",{parentName:"li"},"A programming language is said to have First-class functions when functions in that language are treated like any other variable. For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is a first order function?"),(0,i.kt)("p",{parentName:"li"},"First-order function is a function that doesn\u2019t accept other function as an argument and doesn\u2019t return a function as its return value.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is a higher order function?"),(0,i.kt)("p",{parentName:"li"},"Higher-order function is a function that accepts ot her function as an argument or returns a function as a return value.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is a unary function?"),(0,i.kt)("p",{parentName:"li"},"Unary function (i.e. monadic) is a function that accepts exactly one argument.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is currying function?"),(0,i.kt)("p",{parentName:"li"},"Currying is the transformation of a function with multiple arguments into a sequence of single-argument functions. That means converting a function like this ",(0,i.kt)("inlineCode",{parentName:"p"},"f(a, b, c, ...)")," into a function like this ",(0,i.kt)("inlineCode",{parentName:"p"},"f(a)(b)(c)"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the purpose of ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," keyword?"),(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What is the difference between ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"var")),(0,i.kt)("table",{parentName:"li"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"let"),(0,i.kt)("th",{parentName:"tr",align:null},"var"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"It has been available from the beginning of JavaScript"),(0,i.kt)("td",{parentName:"tr",align:null},"Introduced as part of ES6")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"It has function scope"),(0,i.kt)("td",{parentName:"tr",align:null},"It has block scope")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Variables will be hoisted (initialized with undefined before code run)"),(0,i.kt)("td",{parentName:"tr",align:null},"Hoisted but not initialized (ReferenceError))")))),(0,i.kt)("p",{parentName:"li"},"PS: ",(0,i.kt)("inlineCode",{parentName:"p"},"Hoisting")," is the process of setting up of memory space for our variables and functions. Before the code starts to execute, the JS engine goes thru the code and sets up blocks of memory for functions and variables. The values of variables are not stored but functions are stored entirely along with their definitions.")),(0,i.kt)("li",{parentName:"ol"})))}d.isMDXComponent=!0}}]);